#!/usr/bin/env python
"""Docker-Pretty-PS
Tired of that awful super wide docker ps output? Try docker-pretty-ps!

Invoke by calling docker-pretty-ps and get an output like so,

Name:         cool-freaking-container
Container ID: 1a685dd9d351
Image ID:     28bbeb325405
Created:      9 days ago
Status:       Up 43 minutes
Command:      "tail -f /dev/null"

Name:         some-postgres
Container ID: 0370c73b4951
Image ID:     postgres:alpine
Created:      9 days ago
Status:       Up 43 minutes
Command:      "/bin/sh -c 'while t..."

"""
import argparse
from datetime import datetime, timedelta
from operator import itemgetter
import subprocess


def run():
    """
    Primary start of the application

    """
    args = _parsed_args()
    out = subprocess.Popen(
        ['docker', 'ps'],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT)
    stdout, stderr = out.communicate()
    containers = clean_output(stdout)
    total_containers = len(containers)
    containers = filter_containers(containers, args.search)
    containers = order_containers(containers, args)
    pretty_print(containers, total_containers, args)


def _parsed_args():
    """
    Parses args from the cli with ArgumentParser

    :returns: Parsed arguments
    :rtype: <Namespace> obj
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("search", nargs='?', default='', help="Phrase to search containers, comma separate multiples")
    parser.add_argument(
        "-o",
        "--order",
        nargs='?',
        default='',
        help="Order by, defaults to container start, allows 'container', 'image'.")
    parser.add_argument(
        "-r",
        "--reverse",
        default=False,
        action='store_true',
        help="Reverses the display order.")
    args = parser.parse_args()
    return args


def clean_output(output):
    """
    Cleans the output from the docker ps command, storing it into a list of dicts.

    :param output: The standard out from the docker ps command.
    :type output: str
    :returns: Cleaned, usable output from docker-ps
    :rtype: list
    """
    lines = output.split('\n')
    containers = []
    for line in lines[1:]:
        line_split = line.split('  ')
        revised_line_split = []
        if len(line_split) == 1:
            continue
        for piece in line_split:
            if piece and piece.strip() != '':
                revised_line_split.append(piece)
        container = {
            'container_id': revised_line_split[0].strip(),
            'image_id': revised_line_split[1].strip(),
            'command': revised_line_split[2].strip(),
            'created': revised_line_split[3].strip(),
            'status': revised_line_split[4].strip(),
            'status_date': get_container_time(revised_line_split[4].strip())
        }

        # Not all containers will have ports
        if len(revised_line_split) == 6:
            container['ports'] = []
            container['name'] = revised_line_split[5].strip()
        else:
            container['ports'] = _clean_ports(revised_line_split[5])
            container['name'] = revised_line_split[6].strip()
        containers.append(container)

    containers = get_container_colors(containers)
    return containers


def _clean_ports(port_str):
    """
    :param port_str: The string of ports from the docker ps output.
    :type port_str: str
    :returns: The ports broken into a list.
    :rtype: list
    """
    port_str = port_str.strip()
    if ', ' not in port_str:
        return [port_str]

    ports = port_str.split(', ')
    return ports


def get_container_time(val):
    """
    Gets the relative time the container was created based on the string from the docker ps command.

    :param val: The string representation of when the container was started.
    :type val: str
    :returns: Rough datetime for when the continer was started.
    :rtype: <Datetime obj>
    """
    now = datetime.now()
    cleaned = val.replace('Up ', '').lower()
    # 'Restarting' containers will look like so "Restarting (1) 36 seconds ago"
    if 'restarting'.lower() in cleaned:
        cleaned = cleaned[cleaned.find(')') + 1:]
        cleaned = cleaned.replace('ago', '').strip()

    if '(healthy' in cleaned:
        cleaned = cleaned[:cleaned.find('(healthy')].strip()
        
    if 'seconds' in cleaned:
        digit = cleaned.replace(' seconds', '')
        digit = int(digit)
        the_date = now - timedelta(seconds=digit)
    elif 'minutes' in cleaned:
        digit = cleaned.replace(' minutes', '')
        digit = int(digit)
        the_date = now - timedelta(minutes=digit)
    elif 'about an hour' in cleaned:
        digit = 1
        the_date = now - timedelta(hours=digit)
    elif 'hours' in cleaned:
        digit = cleaned.replace(' hours', '')
        digit = int(digit)
        the_date = now - timedelta(hours=digit)
    else:
        the_date = now

    return the_date


def get_container_colors(containers):
    """
    Sets the ANSII color cmd to use for each container based on it's position in the list.

    :param containers: The containers found from docker ps.
    :type containers: list
    :returns: Added color cmd to each container.
    :rtype: list
    """
    count = 0
    for c in containers:
        c['color'] = get_color(count)
        count += 1
    return containers


def get_color(count):
    """
    Gets a color from the list of colors.
    @todo: Some more colors that are visable on light and dark screens would be nice.

    :param count:
    :type count:
    :returns: The ASNII color to use when printing to the terminal.
    :rtype: int
    """
    colors = [
        '\033[94m',  # purple
        '\033[92m',  # green
        '\033[91m',  # red
        '\033[96m',  # cyan
        '\033[93m',  # yellow
        '\033[95m',  # magenta
    ]
    while count > len(colors):
        colors += colors

    return colors[count - 1]


def filter_containers(containers, searches):
    """
    Filters containers by the search phrase matching the container name in some way.

    :param containers: The containers found from docker ps.
    :type containers: list
    :param searches: The search phrase to search container names.
    :type searches: str
    :returns: The filtered list of dicts of containers.
    :rtype: list
    """
    if not searches:
        return containers

    if ',' in searches:
        searches = searches.split(',')
    else:
        searches = [searches]

    filtered_containers = []
    for container in containers:
        for search in searches:
            if search in container['name']:
                filtered_containers.append(container)
                break

    return filtered_containers


def order_containers(containers, args):
    """
    Orders containers based on the field requested.

    :param containers: The containers found from docker ps.
    :type containers: list
    :param args: Parsed arguments from cli.
    :type args: <Namespace> obj
    :returns: The ordered list of dicts of containers.
    :rtype: list
    """
    if not containers:
        return containers

    field = 'status_date'
    if args.order:
        if args.order in ['container', 'container-name', 'container-id']:
            field = 'container_id'
        if args.order in ['image', 'image-id', 'image-name']:
            field = 'image_id'

    ordered_containers = sorted(containers, key=itemgetter(field))

    if args.reverse:
        ordered_containers.reverse()

    if field in ['status_date'] and not args.reverse:
        ordered_containers.reverse()
    return ordered_containers


def pretty_print(containers, total_containers, args):
    """
    Actually prints the stuff to the console.

    :param containers: The containers found from docker ps.
    :type containers: list
    :param total_containers: Number of total running containers.
    :type total_containers: int
    :param args: Parsed arguments from cli.
    :type args: <Namespace> obj
    """
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    if args.search:
        print('Currently running containers with: %s\n' % args.search)
    else:
        print('All Currently running docker containers\n')
    for container in containers:
        print(BOLD + container['color'] + container['name'] + ENDC)
        print('\t' + BOLD + 'Status:' + ENDC + '\t\t\t' + container['status'])
        print('\t' + BOLD + 'Created:' + ENDC + '\t\t' + container['created'])
        if len(container['ports']) == 0:
            print('\t' + BOLD + 'Ports:' + ENDC + '\t\t\t' + '')
        elif len(container['ports']) == 1:
            print('\t' + BOLD + 'Ports:' + ENDC + '\t\t\t' + container['ports'][0])
        else:
            c = 0
            for container_port in container['ports']:
                if c == 0:
                    print('\t' + BOLD + 'Ports:' + ENDC + '\t\t\t' + container_port)
                else:
                    print('\t\t\t\t' + container_port)
                c += 1

        print('\t' + BOLD + 'Container ID:' + ENDC + '\t\t' + container['container_id'])
        print('\t' + BOLD + 'Image ID:' + ENDC + '\t\t' + container['image_id'])
        print('\t' + BOLD + 'Command:' + ENDC + '\t\t' + container['command'])
        print('')
    print('Total Containers:\t%s' % total_containers)
    if args.search:
        print('Containers in Seach:\t%s' % len(containers))


if __name__ == '__main__':
    run()
